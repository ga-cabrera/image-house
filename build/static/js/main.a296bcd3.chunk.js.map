{"version":3,"sources":["components/MemeGrid/index.js","components/CreateButton/index.js","components/UploadButton/index.js","components/LogInButton/index.js","components/Navbar/index.js","components/Leaderboard/index.js","components/FakeFooter/index.js","components/MemeGenerator/index.js","components/MemeModal/index.js","components/ZoomModal/index.js","App.js","serviceWorker.js","index.js"],"names":["MemeGrid","props","className","memeGallery","map","meme","key","_id","alt","data-id","data-url","data-likes","likes","src","onClick","event","showZoomedMeme","CreateButton","data-tip","id","toggleModal","UploadButton","uploadWidget","LogInButton","Navbar","role","aria-label","href","width","height","aria-expanded","data-target","aria-hidden","place","effect","Leaderboard","memeLeaders","FakeFooter","target","rel","MemeGenerator","contentContainerRef","React","images","setImages","activeImage","setActiveImage","textTop","setTextTop","textBottom","setTextBottom","handleInputChange","name","value","widget","window","cloudinary","createUploadWidget","cloudName","uploadPreset","tags","error","result","console","log","info","url","axios","post","then","newMeme","config","data","tempArray","push","setState","memeArray","getDataFromDB","getLeadersFromDB","catch","err","location","reload","a","async","fetch","res","json","imgData","memes","fetchImage","placeholder","type","onChange","htmlFor","accept","URL","createObjectURL","files","hidden","image","Math","floor","random","length","domtoimage","toPng","current","dataUrl","saveAs","open","ref","MemeModal","ZoomModal","clickedMemeUrl","clickedMemeId","likeMeme","clickedMemeLikes","date","style","padding","borderRadius","right","bottom","backgroundColor","outline","zIndex","App","state","get","modal","document","getElementById","classList","toggle","newLikes","parseInt","update","dataset","openUploadWidget","cloud_name","upload_preset","bind","this","$navbarBurgers","Array","prototype","slice","call","querySelectorAll","forEach","el","addEventListener","$target","ToggledStyle","Component","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a296bcd3.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css'\n\nfunction MemeGrid(props) {\n    return (\n        <div>\n          <div className=\"meme-wrapper-header\">\n          </div>\n          <div className=\"meme-wrapper\">\n              {\n              !props.memeGallery[0] ? \n            // If invalid search term, return try again message\n            <div><h1 className=\"subtitle\">Hmm.. Try a different time</h1></div> : \n            // Else display photo set\n            props.memeGallery.map(meme => (\n              <div className=\"meme image is-square\" key={meme._id}>\n                <img alt=\"meme\" data-id={meme._id} data-url={meme.meme} data-likes={meme.likes} src={meme.meme} onClick={(event) => props.showZoomedMeme(event)}></img>\n                {/* <div className=\"overlay\" data-id={meme._id} data-url={meme.meme} data-likes={meme.likes} src={meme.meme} onClick={(event) => props.showZoomedMeme(event)}> </div>*/}\n                <div className=\"is-overlay\" data-id={meme._id} data-url={meme.meme} data-likes={meme.likes} src={meme.meme} onClick={(event) => props.showZoomedMeme(event)}> \n                  <span className=\"has-text-white like-count is-unselectable\" onClick={(event) => props.showZoomedMeme(event)}><i className=\"fas fa-crown\"></i> {meme.likes}</span>\n                </div>\n              </div>\n            ))}\n          {/* {props.createGrid()} */}\n          </div>\n        </div>\n    )\n}\n\nexport default MemeGrid;","import React from \"react\";\n\nfunction CreateButton(props) {\n    return (\n        <button className=\"button has-background-success has-text-white-bis\" data-tip=\"Create a Meme\" id=\"add-meme\" onClick={() => props.toggleModal(\"generator\")}>\n            <span className=\"icon\">\n            <i className=\"fas fa-pencil-alt\"></i>\n            </span>\n        </button>\n    )\n}\n\nexport default CreateButton;","import React from 'react';\n\nfunction UploadButton(props) {\n    return (\n        <button className=\"button has-background-link has-text-white-bis\" data-tip=\"Upload a Meme\" onClick={props.uploadWidget}>\n            <span className=\"icon\">\n                <i className=\"fas fa-upload\"></i>\n            </span>\n        </button>\n    )\n}\n\nexport default UploadButton;","import React from 'react';\n\nfunction LogInButton() {\n    return (\n        <button className=\"button has-background-grey-darker has-text-white-bis\" data-tip=\"Log In\">\n            <span className=\"icon\">\n                <i className=\"far fa-user\"></i>\n            </span>\n        </button>\n    )\n}\n\nexport default LogInButton;","import React from 'react';\nimport CreateButton from \"../CreateButton\";\nimport UploadButton from \"../UploadButton\";\nimport \"../Navbar/style.css\"\nimport LogInButton from '../LogInButton';\nimport ReactTooltip from 'react-tooltip';\n\nfunction Navbar(props) {\n    return (\n        <nav className=\"navbar is-fixed-top is-transparent\" role=\"navigation\" aria-label=\"main navigation\">\n            <div className=\"navbar-brand\">\n                <a className=\"navbar-item\" href=\"/\">\n                    <img src=\"https://images.onlinelabels.com/images/clip-art/pitr/pitr_Home_icon.png\" className=\"logo\" alt=\"logo\" width=\"28\" height=\"28\"></img>\n                    <h1 className=\"title app-name\">meme house</h1>\n                </a>\n                <button className=\"navbar-burger burger\" aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarBasic\">\n                    <span aria-hidden=\"true\"></span>\n                    <span aria-hidden=\"true\"></span>\n                    <span aria-hidden=\"true\"></span>\n                </button>\n            </div>\n\n            <div id=\"navbarBasic\" className=\"navbar-menu\">\n                <div className=\"navbar-start\">\n                    <div className=\"navbar-item\">\n                    </div>\n                </div>\n\n                <div className=\"navbar-end\">\n                    <div className=\"navbar-item\">\n                        <div className=\"buttons\">\n                            <ReactTooltip place=\"bottom\" effect=\"solid\" />\n                            <UploadButton uploadWidget={props.uploadWidget} />\n                            <CreateButton toggleModal={props.toggleModal} />\n                            <LogInButton />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </nav>\n    );\n}\n\nexport default Navbar;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Leaderboard(props) {\n    return (\n        <div className=\"box leaderboard-container\">\n            <h1 className=\"subtitle\">King of the Memes</h1>\n            <div className=\"leaderboard\">\n                <div className=\"scrolling-wrapper\">\n                    {!props.memeLeaders[0] ?\n                        // If invalid search term, return try again message\n                        <div><h1 className=\"subtitle \">Hmm.. No leaders yet</h1></div> :\n                        // Else display leaders\n                        props.memeLeaders.map(meme => (\n                            <div className=\"lead-meme\" key={meme._id}>\n                                <img data-id={meme._id} src={meme.meme} data-url={meme.meme} key={meme._id} data-likes={meme.likes} onClick={(event) => props.showZoomedMeme(event)} alt=\"meme\" className=\"lead-meme-img\"></img>\n                                {/* <span><i className=\"fas fa-thumbs-up\"></i>{meme.likes}</span> */}\n                        </div>))}\n                </div>\n            </div>\n        </div>\n\n    )\n}\nexport default Leaderboard;","import React from 'react';\nimport './style.css';\n\nfunction FakeFooter() {\n    return(\n        <div className='columns is-hidden-touch'>\n            <div className='column fake-footer-text'>\n                <a href=\"https://github.com/madeleineprak/Meme-House\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>\n                <br/>\n                <p>© 2020 MEME HOUSE</p>\n            </div>\n        </div>\n    )\n}\n\nexport default FakeFooter;","import * as React from 'react';\nimport domtoimage from 'dom-to-image-more';\nimport FakeFooter from '../FakeFooter';\nimport './style.css';\nimport axios from 'axios'\n\n// eslint-disable-next-line\nimport { saveAs } from 'file-saver';\n\nfunction MemeGenerator() {\n  let contentContainerRef = React.useRef(null)\n  \n  const [images, setImages] = React.useState([]);\n  const [activeImage, setActiveImage] = React.useState('');\n  const [textTop, setTextTop] = React.useState('');\n  const [textBottom, setTextBottom] = React.useState('');\n\n  async function fetchImage() {\n    // Get the memes\n    const imgData = await fetch('https://api.imgflip.com/get_memes').then(res => res.json()).catch(err => console.error(err))\n    const { memes } = await imgData.data\n    // Update images state\n    await setImages(memes)\n    // Update activeImage state\n    await setActiveImage(memes[16].url)\n  }\n\n  function handleImageChange() {\n    // Choose image\n    const image = images[Math.floor(Math.random() * images.length)]\n    // Update activeImage state\n    setActiveImage(image.url)\n  }\n\n  function handleImageInputChange(event) {\n    // Update activeImage state\n    setActiveImage(window.URL.createObjectURL(event.target.files[0]))\n  }\n\n  function handleInputChange(event) {\n    if (event.target.name === 'text-top') {\n      // Update textTop state\n      setTextTop(event.target.value)\n    } else {\n      // Update textBottom state\n      setTextBottom(event.target.value)\n    }\n  }\n\n  function handleMemeGeneration() {\n    domtoimage.toPng(contentContainerRef.current).then((dataUrl) => {\n      // Save image\n      window.saveAs(dataUrl, 'meme.png');\n    })\n  }\n\n\n  // Upload Straight to Cloudinary\n  const widget = window.cloudinary.createUploadWidget({ \n    cloudName: \"traphouse\", uploadPreset: \"memehouse\", tags: ['meme']}, \n    (error, result) => { \n      if (result.event === \"success\") {\n      console.log(`Success! added to your Database -- ${result.info.url}`)\n      axios.post('/api/putData', {\n        meme: result.info.url\n        })\n        .then((result) => {\n          let newMeme = result.config.data;\n          let tempArray = [];\n          tempArray.push(newMeme);\n          this.setState({ memeArray: tempArray });\n        })\n        .then(() => {\n          this.getDataFromDB();\n        })\n        .then(() => {\n          this.getLeadersFromDB();\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n      window.location.reload();\n      }\n    });\n\n  function uploadStraightToCloud() {\n    domtoimage.toPng(contentContainerRef.current).then((dataUrl) => {\n      widget.open(null, {files: [dataUrl]})})\n  }\n\n  React.useEffect(() => {\n    // Call fetchImage method\n    fetchImage()\n  }, [])\n\n  return (\n    <div className=\"columns meme-gen-columns\">\n      <div className=\"column\">\n        <form className=\"form\">\n          <div className=\"formInputs\">\n            {/* Top Text Input */}\n            <input\n              name=\"text-top\"\n              placeholder=\"Top Text\"\n              type=\"text\"\n              value={textTop}\n              onChange={handleInputChange}\n            />\n            {/* Bottom Text Input */}\n            <input\n              name=\"text-bottom\"\n              placeholder=\"Bottom Text\"\n              type=\"text\"\n              value={textBottom}\n              onChange={handleInputChange}\n            />\n          </div>\n\n          <div className=\"formButtons\">\n            {/* Upload Meme Button */}\n            <label\n              className=\"button is-link\"\n              htmlFor=\"fileInput\"\n            >\n              <span className=\"file-label\">\n                Add Image\n              </span>\n              <input id=\"fileInput\" name=\"fileInput\" type=\"file\" accept=\".jpg, .jpeg, .png\" onChange={handleImageInputChange} hidden />\n            </label>\n            {/* Randomize Meme Button */}\n            <button\n              className=\"button is-danger\"\n              type=\"button\"\n              onClick={handleImageChange}\n            >\n              Randomize\n            </button>\n            {/* Download Meme Button */}\n            <button\n              className=\"button is-warning\"\n              type=\"button\"\n              onClick={handleMemeGeneration}\n            >\n              Download\n            </button>\n\n            {/* Upload Straight to Cloud */}\n            <button\n              className=\"button is-success\"\n              type=\"button\"\n              onClick={uploadStraightToCloud}\n            >\n              <span className=\"file-icon\">\n                <i className=\"fas fa-upload\"></i>\n              </span>\n              <span className=\"file-label\">\n                Upload\n              </span>\n            </button>\n          </div>\n        </form>\n        <hr/>\n        <FakeFooter />\n      </div>\n\n      <div className=\"column\">\n        {/*Content Div */}\n        <div className=\"content\" ref={contentContainerRef}>\n          {/* Image preview */}\n          <img src={activeImage} alt=\"Meme\" />\n          {/* Text at the top */}\n          <h1 className=\"textTop\">{textTop}</h1>\n          {/* Text at the bottom */}\n          <h1 className=\"textBottom\">{textBottom}</h1>\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default MemeGenerator;","import React from \"react\";\nimport MemeGenerator from '../MemeGenerator'\nimport \"./style.css\";\n\nfunction MemeModal(props) {\n    return (\n        <div id=\"generator\" className=\"generator-modal modal\">\n            <div className=\"modal-background\"></div>\n            <div className=\"modal-content has-background-white meme-gen-container\">\n                <header className=\"modal-card-head\">\n                    <p className=\"modal-card-title\">Create a Meme</p>\n                <button className=\"delete\" onClick={() => props.toggleModal(\"generator\")} aria-label=\"close\"></button>\n                </header>\n                <section className=\"modal-card-body\">\n                    <MemeGenerator />\n                </section>\n            </div>\n        </div>\n    )\n}\n\nexport default MemeModal;","import React from \"react\";\nimport './style.css';\n\nfunction ZoomModal(props) {\n    return (\n        <div id=\"zoom\" className=\"zoom-modal modal\">\n            <div className=\"modal-background\"></div>\n            <div className=\"modal-content has-background-white \">\n                <p className=\"image is-loading\">\n                    <img src={props.clickedMemeUrl} alt=\"meme\"></img>\n                </p>\n                <div className=\"social-section\">\n                    <span data-id={props.clickedMemeId} onClick={() => props.likeMeme()} className=\"like-button\"><i className=\"fas fa-crown\"></i></span>\n                    <span>  {props.clickedMemeLikes} {props.date}</span>\n                </div>\n                <button className=\"modal-close is-large\" onClick={() => props.toggleModal(\"zoom\")} aria-label=\"close\"></button>\n            </div>\n        </div>\n    )\n}\n\nexport default ZoomModal;","import React, { Component } from 'react';\nimport axios from 'axios';\n// import { useState } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport MemeGrid from '../src/components/MemeGrid';\nimport Navbar from '../src/components/Navbar';\nimport Leaderboard from '../src/components/Leaderboard';\nimport MemeModal from '../src/components/MemeModal';\nimport ZoomModal from '../src/components/ZoomModal';\nimport FakeFooter from '../src/components/FakeFooter';\nimport ScrollUpButton from \"react-scroll-up-button\";\n\n// Style for Scroll Button \nconst style = { padding: '3px', borderRadius: '50px', right: '3rem', bottom: '2rem' , backgroundColor: 'red', outline: 0, zIndex: 20};\n\n// App \nclass App extends Component {\n  state = {\n    // Initializing state for Meme DB - GC\n    memeArray: [],\n    meme: null,\n    memeGallery: [],\n    memeLeaders: [],\n    clickedMemeUrl: \"\",\n    clickedMemeId: \"\",\n    clickedMemeLikes: 0,\n  }\n\n  componentDidMount() {\n    // Getting Data from DB -GC\n    this.getDataFromDB();\n    this.getLeadersFromDB();\n    // Bulma mobile toggle\n    const $navbarBurgers = Array.prototype.slice.call(document.querySelectorAll('.navbar-burger'), 0);\n    if ($navbarBurgers.length > 0) {\n      $navbarBurgers.forEach(el => {\n        el.addEventListener('click', () => {\n          const target = el.dataset.target;\n          const $target = document.getElementById(target);\n          el.classList.toggle('is-active');\n          $target.classList.toggle('is-active');\n        });\n      });\n    }\n  }\n\n  //get method that uses backend api to get data from DB - GC\n  getDataFromDB = () => {\n    axios.get('http://localhost:3001/api/memes/')\n      .then((res) => this.setState({ memeGallery: res.data }))\n  };\n\n  getLeadersFromDB = () => {\n    axios.get('http://localhost:3001/api/leaders/')\n      .then((res) => this.setState({ memeLeaders: res.data }))\n  }\n\n  toggleModal = (modal) => {\n      var element = document.getElementById(modal);\n      element.classList.toggle(\"is-active\");\n  }\n\n  likeMeme = () => {\n    // Doesn't have a restriction on how many times a user can like a picture, need to implement\n    let newLikes = parseInt(this.state.clickedMemeLikes) + 1\n    axios.post('http://localhost:3001/updateData', {\n      id: this.state.clickedMemeId,\n      update: newLikes\n    })\n    .then((res) => console.log(res))\n    .then(this.setState({ clickedMemeLikes: newLikes }))\n    .then(this.getDataFromDB())\n    .then(this.getLeadersFromDB())\n  }\n\n  showZoomedMeme = (event) => {\n    this.setState({ clickedMemeUrl: event.target.dataset['url'], clickedMemeId: event.target.dataset['id'], clickedMemeLikes: event.target.dataset['likes'], date: event.target.dataset['createdAt'] })\n    this.toggleModal(\"zoom\");\n  }\n\n  // Cloudinary Upload Widget //\n  uploadWidget = () => {\n    window.cloudinary.openUploadWidget({ cloud_name: 'traphouse', upload_preset: 'memehouse', tags: ['meme'] },\n      function (error, result) {\n        console.log('************* uploading... *************')\n        console.log(result)\n        if (result.event === \"success\") {\n          console.log(`Success! added to your Database -- ${result.info.url}`)\n          axios.post('/api/putData', {\n            meme: result.info.url\n          })\n            .then((result) => {\n              let newMeme = result.config.data;\n              let tempArray = [];\n              tempArray.push(newMeme);\n              this.setState({ memeArray: tempArray });\n            })\n            .then(() => {\n              this.getDataFromDB();\n            })\n            .then(() => {\n              this.getLeadersFromDB();\n            })\n            .catch((err) => {\n              console.log(err);\n            });\n        }\n      }.bind(this));\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <ScrollUpButton style={style} ToggledStyle={style}/>\n        <MemeModal toggleModal={this.toggleModal} />\n        <ZoomModal toggleModal={this.toggleModal} clickedMemeId={this.state.clickedMemeId} clickedMemeUrl={this.state.clickedMemeUrl} clickedMemeLikes={this.state.clickedMemeLikes} likeMeme={this.likeMeme}/>\n        <Navbar toggleModal={this.toggleModal} uploadWidget={this.uploadWidget} />\n        <div className=\"columns is-desktop is-centered\">\n          <div className=\"column is-2-desktop\">\n            <div className=\"aside\">\n              <Leaderboard memeLeaders={this.state.memeLeaders} showZoomedMeme={this.showZoomedMeme}/>\n              <FakeFooter />\n            </div>\n          </div>\n          <div className=\"column is-7-desktop \">\n            <MemeGrid  showZoomedMeme={this.showZoomedMeme} memeGallery={this.state.memeGallery} toggleModal={this.toggleModal} clickedMemeUrl={this.clickedMemeLikes}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}